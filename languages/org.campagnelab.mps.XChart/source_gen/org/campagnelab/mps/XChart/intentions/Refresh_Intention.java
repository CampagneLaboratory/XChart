package org.campagnelab.mps.XChart.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.campagnelab.mps.XChart.behavior.Chart_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class Refresh_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public Refresh_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.mps.XChart.structure.Histogram";
  }

  public String getPresentation() {
    return "Refresh";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.mps.XChart.intentions.Refresh_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.mps.XChart";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "values", true) != null) && isNotEmptyString(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(node, "values", true), "virtual_getColumnName_7335187880077215104", new Object[]{}));
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:842b6531-a1e1-473a-89dd-b9b278dee119(org.campagnelab.mps.XChart.intentions)", "3487897233198623536");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new Refresh_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Refresh Chart";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      Chart_Behavior.call_refresh_3487897233198405658(node);
    }

    public IntentionDescriptor getDescriptor() {
      return Refresh_Intention.this;
    }
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
