package org.campagnelab.mps.XChart.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.campagnelab.mps.XChart.behavior.Chart_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class RefreshChart_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public RefreshChart_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.mps.XChart.structure.Chart";
  }

  public String getPresentation() {
    return "RefreshChart";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.mps.XChart.intentions.RefreshChart_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.mps.XChart";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:842b6531-a1e1-473a-89dd-b9b278dee119(org.campagnelab.mps.XChart.intentions)", "6638345083847525643");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new RefreshChart_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Refresh Chart";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      Chart_Behavior.call_putComponentInternal_7263499363579768301(node, null);
      editorContext.getEditorComponent().rebuildEditorContent();

    }

    public IntentionDescriptor getDescriptor() {
      return RefreshChart_Intention.this;
    }
  }
}
