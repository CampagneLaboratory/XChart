package org.campagnelab.mps.XChart.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.mps.XChart.behavior.DelimitedFile_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class DelimitedFile_Constraints extends BaseConstraintsDescriptor {
  public DelimitedFile_Constraints() {
    super("org.campagnelab.mps.XChart.structure.DelimitedFile");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("path", new BasePropertyConstraintsDescriptor("path", this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }

      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "path";
        if (!(new File((SPropertyOperations.getString(propertyValue))).exists())) {
          return;
        }
        SPropertyOperations.set(node, "path", (SPropertyOperations.getString(propertyValue)));

        ListSequence.fromList(SLinkOperations.getTargets(node, "columns", true)).clear();
        for (String col : DelimitedFile_Behavior.call_parseColumns_3597430320022539917(node)) {
          if (col == null) {
            continue;
          }
          SNode c = SConceptOperations.createNewNode("org.campagnelab.mps.XChart.structure.Column", null);
          SPropertyOperations.set(c, "name", col);
          ListSequence.fromList(SLinkOperations.getTargets(node, "columns", true)).addElement(c);
        }
      }
    });
    return properties;
  }
}
