package org.campagnelab.mps.XChart.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.mps.XChart.behavior.DelimitedFile_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class DelimitedFile_Constraints extends BaseConstraintsDescriptor {
  public DelimitedFile_Constraints() {
    super("org.campagnelab.mps.XChart.structure.DelimitedFile");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("path", new BasePropertyConstraintsDescriptor("path", this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }

      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "path";
        {
          File file = new File((SPropertyOperations.getString(propertyValue)));
          if (!(file.exists())) {
            return;
          }
          SPropertyOperations.set(node, "path", (SPropertyOperations.getString(propertyValue)));
          SPropertyOperations.set(node, "name", file.getName());
          List<SNode> previousColumns = ListSequence.fromList(new ArrayList<SNode>());
          ListSequence.fromList(previousColumns).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "columns", true)));
          ListSequence.fromList(SLinkOperations.getTargets(node, "columns", true)).clear();
          for (String col : DelimitedFile_Behavior.call_parseColumns_3597430320022539917(node)) {
            if (col == null) {
              continue;
            }
            SNode c = SModelOperations.createNewNode(SNodeOperations.getModel(node), null, "org.campagnelab.mps.XChart.structure.Column");
            SPropertyOperations.set(c, "name", col);
            DelimitedFile_Behavior.call_assignColumnType_5010237105647900617(node, c);
            if (SNodeOperations.isInstanceOf(node, "org.campagnelab.mps.XChart.structure.HasDataToPreserve")) {
              BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(node, "org.campagnelab.mps.XChart.structure.HasDataToPreserve"), "virtual_newColumAdded_2172361557619401878", new Object[]{c, previousColumns});
            }
            ListSequence.fromList(SLinkOperations.getTargets(node, "columns", true)).addElement(c);
          }
        }
      }
    });
    return properties;
  }
}
